from typing import Dict, Any
import subprocess
import os
import json
from pathlib import Path
from .base_scanner import BaseScanner


class ReconScanner(BaseScanner):
    """
    Scanner for reconnaissance operations, including subdomain enumeration.
    """
    
    def __init__(self):
        super().__init__()
        self.name = "Recon Scanner"
        self.description = "Performs reconnaissance operations including subdomain enumeration"
        self.script_path = os.path.join(
            Path(__file__).parent.parent, "scripts", "subdomain_enum.sh"
        )
    
    def scan(self, url: str) -> Dict[str, Any]:
        """
        Scan the provided URL for subdomains using subdomain_enum.sh.
        
        Args:
            url: The target domain to scan (e.g., example.com)
            
        Returns:
            A dictionary containing the scan results
        """
        # Validate URL before scanning
        if not self.validate_url(url):
            return {"error": "Invalid URL provided"}
        
        # Extract domain from URL
        from urllib.parse import urlparse
        domain = urlparse(url).netloc
        if not domain:
            domain = urlparse("https://" + url).netloc
        
        # Run the subdomain enumeration script
        try:
            result = subprocess.run(
                [self.script_path, domain],
                capture_output=True,
                text=True,
                check=True
            )
            
            # Parse output
            output = result.stdout.strip()
            
            # Try to parse as JSON if possible
            try:
                parsed_output = json.loads(output)
                results = parsed_output
            except json.JSONDecodeError:
                # If not JSON, return as text
                results = {"subdomains": output.split("\n")}
                
            return {
                "scanner": self.name,
                "domain": domain,
                "results": results,
                "status": "success"
            }
            
        except subprocess.CalledProcessError as e:
            return {
                "scanner": self.name,
                "domain": domain,
                "error": f"Script execution failed: {e.stderr}",
                "status": "error"
            }
        
        except Exception as e:
            return {
                "scanner": self.name,
                "domain": domain,
                "error": f"Error occurred: {str(e)}",
                "status": "error"
            } 